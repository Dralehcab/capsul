{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1>Capsul: Collaborative Analysis Platform : Simple, Unifying, Lean</h1>\n",
    "<div style=\"text-align: center\">Credit: Antoine Grigis</div>\n",
    "\n",
    "Capsul is a simple and efficient Python tool that aims to organize a set of processings.\n",
    "It is accessible to everybody, and is reusable in various contexts.\n",
    "The project is hosted on github: https://github.com/neurospin/capsul.<br><br>\n",
    "\n",
    "<big>Definitions</big>\n",
    "\n",
    "<ul style=\"list-style-type:disc;\">\n",
    "<li>A <b>Process</b> is a processing that can derived directly from a Python function and that can be used as a building block of a pipeline.</li>\n",
    "<li>A <b>Pipeline</b> is a serie of connected processes.</li>\n",
    "</ul><br>\n",
    "\n",
    "<big>First check</big>\n",
    "\n",
    "In order to test if capsul is installed on your machine, you can ask the the Capsul version:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# just to ensure compatibility of this notebook with python 2 and 3\n",
    "from __future__ import print_function\n",
    "# the following to avoid display when this notebook is converted to sphinx doc\n",
    "import os\n",
    "if os.environ.get('ALLOW_GUI', 'TRUE') in ('FALSE', '0'):\n",
    "    use_gui = False\n",
    "else:\n",
    "    use_gui = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.1.1\n"
     ]
    }
   ],
   "source": [
    "import capsul\n",
    "print(capsul.__version__)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>Use a function as a building block</h2>\n",
    "\n",
    "It is possible to convert a function in Process and thus use it as a building block of a pipeline. In the following example we will use the 'a_function_to_wrap' test function:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "def a_function_to_wrap(fname, directory, value, enum, list_of_str):\n",
      "    \"\"\" A dummy fucntion that just print all its parameters.\n",
      "\n",
      "    <process>\n",
      "        <return name=\"string\" type=\"string\" doc=\"test\" />\n",
      "        <input name=\"fname\" type=\"file\" doc=\"test\" />\n",
      "        <input name=\"directory\" type=\"directory\" doc=\"test\" />\n",
      "        <input name=\"value\" type=\"float\" doc=\"test\" />\n",
      "        <input name=\"enum\" type=\"string\" doc=\"test\" />\n",
      "        <input name=\"list_of_str\" type=\"list_string\" doc=\"test\" />\n",
      "    </process>\n",
      "    \"\"\"\n",
      "    string = \"ALL FUNCTION PARAMETERS::\\n\\n\"\n",
      "    for input_parameter in (fname, directory, value, enum, list_of_str):\n",
      "        string += str(input_parameter)\n",
      "    return string\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import inspect\n",
    "from capsul.process.test.test_load_from_description import a_function_to_wrap\n",
    "\n",
    "print(\"\".join(inspect.getsourcelines(a_function_to_wrap)[0]))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is a pure Python function with the Process description in the docstring between the &lt;process&gt;...&lt;/process&gt; tags. Inside those tags, each returned and input parameters are described in the function order. The parameters are typed and a description is asked in order to generate proper tooltips or documentations. The 'reference' output parameter is optional.<br><br>\n",
    "\n",
    "We can now create a Process from this Python function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " A dummy fucntion that just print all its parameters.\n",
      "\n",
      "    <process>\n",
      "        <return name=\"string\" type=\"string\" doc=\"test\" />\n",
      "        <input name=\"fname\" type=\"file\" doc=\"test\" />\n",
      "        <input name=\"directory\" type=\"directory\" doc=\"test\" />\n",
      "        <input name=\"value\" type=\"float\" doc=\"test\" />\n",
      "        <input name=\"enum\" type=\"string\" doc=\"test\" />\n",
      "        <input name=\"list_of_str\" type=\"list_string\" doc=\"test\" />\n",
      "    </process>\n",
      "    \n",
      "    \n",
      "    .. note::\n",
      "    \n",
      "        * Type 'a_function_to_wrap.help()' for a full description of this process parameters.\n",
      "        * Type '<a_function_to_wrap>.get_input_spec()' for a full description of this process input trait types.\n",
      "        * Type '<a_function_to_wrap>.get_output_spec()' for a full description of this process output trait types.\n",
      "    \n",
      "\n",
      "Inputs\n",
      "~~~~~~\n",
      "\n",
      "[Mandatory]\n",
      "\n",
      "directory: a directory name (['Directory'] - mandatory)\n",
      "    test\n",
      "enum: a string (['String'] - mandatory)\n",
      "    test\n",
      "list_of_str: a legal value (['List_String'] - mandatory)\n",
      "    test\n",
      "value: a float (['Float'] - mandatory)\n",
      "    test\n",
      "fname: a file name (['File'] - mandatory)\n",
      "    test\n",
      "\n",
      "Outputs\n",
      "~~~~~~~\n",
      "\n",
      "string: a string\n",
      "    test\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from capsul.api import get_process_instance\n",
    "\n",
    "funcprocess = get_process_instance(\"capsul.process.test.test_load_from_description.a_function_to_wrap\")\n",
    "funcprocess.help()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can modify some input parameters and execute the process:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ALL FUNCTION PARAMETERS::\n",
      "\n",
      "4.3c['a', 'b']\n"
     ]
    }
   ],
   "source": [
    "funcprocess.list_of_str = [\"a\", \"b\"]\n",
    "funcprocess.value = 4.3\n",
    "funcprocess.enum = \"c\"\n",
    "result = funcprocess()\n",
    "print(funcprocess.string)\n",
    "# print funcprocess.reference"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>Defining a Pipeline</h2>\n",
    "\n",
    "A Pipeline can be described from an xml file. For the documentation of the description glossary, please refere to the capsul documentation. In the following example we will use the 'xml_pipeline.xml' test description:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<pipeline>\n",
      "    <doc>\n",
      "        Auto Generated Pipeline Test\n",
      "    </doc>\n",
      "    <process name=\"p1\"\n",
      "             module=\"capsul.process.test.test_load_from_description.a_function_to_wrap\">\n",
      "        <set name=\"list_of_str\" value=\"['test']\"/>\n",
      "    </process>\n",
      "    <process name=\"p2\"\n",
      "             module=\"capsul.process.test.test_load_from_description.a_function_to_wrap\"/>\n",
      "    <link source=\"p1.string\" dest=\"p2.fname\"/>\n",
      "    <link source=\"pdirectory\" dest=\"p2.directory\"/>\n",
      "    <link source=\"value\" dest=\"p2.value\"/>\n",
      "    <link source=\"enum\" dest=\"p2.enum\"/>\n",
      "    <link source=\"list_of_str\" dest=\"p2.list_of_str\"/>\n",
      "    <link source=\"value\" dest=\"p1.value\"/>\n",
      "    <link source=\"enum\" dest=\"p1.enum\"/>\n",
      "    <link source=\"fname\" dest=\"p1.fname\"/>\n",
      "    <link source=\"list_of_str\" dest=\"p1.list_of_str\"/>\n",
      "    <link source=\"pdirectory\" dest=\"p1.directory\"/>\n",
      "    <link dest=\"out1\" source=\"p2.string\"/>\n",
      "    <gui>\n",
      "        <position name=\"inputs\" x=\"0\" y=\"0\"/>\n",
      "        <position name=\"p1\" x=\"200\" y=\"200\"/>\n",
      "        <position name=\"p2\" x=\"400\" y=\"-200\"/>\n",
      "        <position name=\"outputs\" x=\"600\" y=\"0\"/>\n",
      "        <zoom level=\"1\"/> \n",
      "    </gui>\n",
      "</pipeline>\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import capsul.process.test as test\n",
    "\n",
    "xmldesc = os.path.join(os.path.dirname(test.__file__), \"xml_pipeline.xml\")\n",
    "with open(xmldesc, \"r\") as openfile:\n",
    "    print(\"\".join(openfile.readlines()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Two building blocks are connected in this example. We will soon have a graphical representation of the pipeline, which in turn will clarify the xml sections. But first we must create a Pipeline from this xml description:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Auto Generated Pipeline Test\n",
      "\n",
      ".. note::\n",
      "\n",
      "    * Type 'ProcessMeta.help()' for a full description of this process parameters.\n",
      "    * Type '<ProcessMeta>.get_input_spec()' for a full description of this process input trait types.\n",
      "    * Type '<ProcessMeta>.get_output_spec()' for a full description of this process output trait types.\n",
      "\n",
      "\n",
      "Inputs\n",
      "~~~~~~\n",
      "\n",
      "[Mandatory]\n",
      "\n",
      "enum: a string (['String'] - mandatory)\n",
      "    test\n",
      "pdirectory: a directory name (['Directory'] - mandatory)\n",
      "    test\n",
      "value: a float (['Float'] - mandatory)\n",
      "    test\n",
      "list_of_str: a legal value (['List_String'] - mandatory)\n",
      "    test\n",
      "fname: a file name (['File'] - mandatory)\n",
      "    test\n",
      "nodes_activation: a legal value (['ControllerTrait'] - mandatory)\n",
      "    No description.\n",
      "\n",
      "Outputs\n",
      "~~~~~~~\n",
      "\n",
      "out1: a string\n",
      "    test\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from capsul.api import get_process_instance\n",
    "\n",
    "xmlpipe = get_process_instance(\"capsul.process.test.xml_pipeline\")\n",
    "xmlpipe.help()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One major advantage of the capsul pipeline system is to be able to represent graphically the processing sequence:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "app created: True\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "if globals().get('use_gui', True):\n",
    "    from soma.qt_gui import qt_backend\n",
    "    qt_backend.set_qt_backend('PyQt4')\n",
    "    from soma.qt_gui.qt_backend import QtGui\n",
    "    from capsul.qt_gui.widgets import PipelineDevelopperView\n",
    "    from soma.qt_gui.controller_widget import ControllerWidget\n",
    "\n",
    "    app_created = False\n",
    "    app = QtGui.QApplication.instance()\n",
    "    if app is None:\n",
    "        app = QtGui.QApplication(sys.argv)\n",
    "        app_created = True\n",
    "    print('app created:', app_created)\n",
    "    view = PipelineDevelopperView(xmlpipe)\n",
    "    controller = ControllerWidget(xmlpipe, live=True)\n",
    "    view.show()\n",
    "    controller.show()\n",
    "    if app_created:\n",
    "        app.exec_()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>A structure to switch between processings</h2>\n",
    "\n",
    "In Capsul it is possible to define a building block which aims to select a sequence of processings. It is done with a Switch building block as follows:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<pipeline capsul_xml=\"2.0\">\n",
      "    <process name=\"threshold_gt_1\" \n",
      "     module=\"capsul.process.test.test_load_from_description.threshold\">\n",
      "        <set name=\"threshold\" value=\"1\"/>\n",
      "        <set name=\"method\" value=\"'gt'\"/>\n",
      "    </process>\n",
      "    <process name=\"threshold_gt_10\" \n",
      "     module=\"capsul.process.test.test_load_from_description.threshold\">\n",
      "        <set name=\"threshold\" value=\"10\"/>\n",
      "        <set name=\"method\" value=\"'gt'\"/>\n",
      "    </process>\n",
      "    <process name=\"threshold_gt_100\" \n",
      "     module=\"capsul.process.test.test_load_from_description.threshold\">\n",
      "        <set name=\"threshold\" value=\"100\"/>\n",
      "        <set name=\"method\" value=\"'gt'\"/>\n",
      "    </process>\n",
      "    <process name=\"threshold_lt_1\" \n",
      "     module=\"capsul.process.test.test_load_from_description.threshold\">\n",
      "        <set name=\"threshold\" value=\"1\"/>\n",
      "        <set name=\"method\" value=\"'lt'\"/>\n",
      "    </process>\n",
      "    <process name=\"threshold_lt_10\" \n",
      "     module=\"capsul.process.test.test_load_from_description.threshold\">\n",
      "        <set name=\"threshold\" value=\"10\"/>\n",
      "        <set name=\"method\" value=\"'lt'\"/>\n",
      "    </process>\n",
      "    <process name=\"threshold_lt_100\" \n",
      "     module=\"capsul.process.test.test_load_from_description.threshold\">\n",
      "        <set name=\"threshold\" value=\"100\"/>\n",
      "        <set name=\"method\" value=\"'lt'\"/>\n",
      "    </process>\n",
      "    <process name=\"mask_1\" \n",
      "     module=\"capsul.process.test.test_load_from_description.mask\">\n",
      "    </process>\n",
      "    <process name=\"mask_10\" \n",
      "     module=\"capsul.process.test.test_load_from_description.mask\">\n",
      "    </process>\n",
      "    <process name=\"mask_100\" \n",
      "     module=\"capsul.process.test.test_load_from_description.mask\">\n",
      "    </process>\n",
      "\n",
      "    <link source=\"input_image\" dest=\"threshold_gt_1.input_image\"/>\n",
      "    <link source=\"input_image\" dest=\"threshold_gt_10.input_image\"/>\n",
      "    <link source=\"input_image\" dest=\"threshold_gt_100.input_image\"/>\n",
      "    \n",
      "    <link source=\"input_image\" dest=\"threshold_lt_1.input_image\"/>\n",
      "    <link source=\"input_image\" dest=\"threshold_lt_10.input_image\"/>\n",
      "    <link source=\"input_image\" dest=\"threshold_lt_100.input_image\"/>\n",
      "\n",
      "    <link source=\"input_image\" dest=\"mask_1.input_image\"/>\n",
      "    <link source=\"input_image\" dest=\"mask_10.input_image\"/>\n",
      "    <link source=\"input_image\" dest=\"mask_100.input_image\"/>\n",
      "\n",
      "    <link source=\"threshold_gt_1.output_image\" dest=\"mask_1.mask\"/>\n",
      "    <link source=\"threshold_gt_10.output_image\" dest=\"mask_10.mask\"/>\n",
      "    <link source=\"threshold_gt_100.output_image\" dest=\"mask_100.mask\"/>\n",
      "    <link source=\"threshold_lt_1.output_image\" dest=\"mask_1.mask\"/>\n",
      "    <link source=\"threshold_lt_10.output_image\" dest=\"mask_10.mask\"/>\n",
      "    <link source=\"threshold_lt_100.output_image\" dest=\"mask_100.mask\"/>\n",
      "\n",
      "    <link source=\"mask_1.output_image\" dest=\"output_1\"/>\n",
      "    <link source=\"mask_10.output_image\" dest=\"output_10\"/>\n",
      "    <link source=\"mask_100.output_image\" dest=\"output_100\"/>\n",
      "\n",
      "    <processes_selection name=\"select_method\">\n",
      "        <processes_group name=\"greater than\">\n",
      "            <process name=\"threshold_gt_1\"/>\n",
      "            <process name=\"threshold_gt_10\"/>\n",
      "            <process name=\"threshold_gt_100\"/>\n",
      "        </processes_group>\n",
      "        <processes_group name=\"lower than\">\n",
      "            <process name=\"threshold_lt_1\"/>\n",
      "            <process name=\"threshold_lt_10\"/>\n",
      "            <process name=\"threshold_lt_100\"/>\n",
      "        </processes_group>\n",
      "    </processes_selection>\n",
      "    \n",
      "    <gui>\n",
      "        <position name=\"threshold_gt_100\" x=\"386.0\" y=\"403.0\"/>\n",
      "        <position name=\"inputs\" x=\"50.0\" y=\"50.0\"/>\n",
      "        <position name=\"mask_1\" x=\"815.0\" y=\"153.0\"/>\n",
      "        <position name=\"threshold_gt_10\" x=\"374.0\" y=\"242.0\"/>\n",
      "        <position name=\"threshold_lt_100\" x=\"556.0\" y=\"314.0\"/>\n",
      "        <position name=\"threshold_gt_1\" x=\"371.0\" y=\"88.0\"/>\n",
      "        <position name=\"mask_10\" x=\"820.0\" y=\"293.0\"/>\n",
      "        <position name=\"mask_100\" x=\"826.0\" y=\"451.0\"/>\n",
      "        <position name=\"threshold_lt_1\" x=\"570.0\" y=\"6.0\"/>\n",
      "        <position name=\"threshold_lt_10\" x=\"568.0\" y=\"145.0\"/>\n",
      "\n",
      "        <!--\n",
      "        <position name=\"threshold_gt_100\" x=\"182.35615\" y=\"658.8043\">\n",
      "        <position name=\"mask_1\" x=\"348.3267625\" y=\"205.125\">\n",
      "        <position name=\"threshold_gt_10\" x=\"183.6139625\" y=\"329.3854\">\n",
      "        <position name=\"inputs\" x=\"0.0\" y=\"488.9169\">\n",
      "        <position name=\"outputs\" x=\"512.08755\" y=\"488.9169\">\n",
      "        <position name=\"mask_100\" x=\"348.3267625\" y=\"744.8167\">\n",
      "        <position name=\"threshold_lt_1\" x=\"183.6139625\" y=\"146.998\">\n",
      "        <position name=\"threshold_gt_1\" x=\"183.6139625\" y=\"0.0\">\n",
      "        <position name=\"threshold_lt_100\" x=\"183.6139625\" y=\"805.8291\">\n",
      "        <position name=\"mask_10\" x=\"348.3267625\" y=\"488.9169\">\n",
      "        <position name=\"threshold_lt_10\" x=\"183.6139625\" y=\"476.4169\">\n",
      "        -->\n",
      "    </gui>\n",
      "</pipeline>\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import capsul.process.test as test\n",
    "\n",
    "xmldesc = os.path.join(os.path.dirname(test.__file__), \"test_pipeline.xml\")\n",
    "with open(xmldesc, \"r\") as openfile:\n",
    "    print(\"\".join(openfile.readlines()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Again we can create a Pipeline from his xml description:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      ".. note::\n",
      "\n",
      "    * Type 'test_pipeline.help()' for a full description of this process parameters.\n",
      "    * Type '<test_pipeline>.get_input_spec()' for a full description of this process input trait types.\n",
      "    * Type '<test_pipeline>.get_output_spec()' for a full description of this process output trait types.\n",
      "\n",
      "\n",
      "Inputs\n",
      "~~~~~~\n",
      "\n",
      "[Mandatory]\n",
      "\n",
      "input_image: a file name (['File'] - mandatory)\n",
      "    Path of a NIFTI-1 image file.\n",
      "nodes_activation: a legal value (['ControllerTrait'] - mandatory)\n",
      "    No description.\n",
      "select_method: a legal value (['Enum'] - mandatory)\n",
      "    No description.\n",
      "\n",
      "Outputs\n",
      "~~~~~~~\n",
      "\n",
      "output_10: a file name\n",
      "    Output file name.\n",
      "output_100: a file name\n",
      "    Output file name.\n",
      "output_1: a file name\n",
      "    Output file name.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from capsul.api import get_process_instance\n",
    "\n",
    "xmlpipe = get_process_instance(\"capsul.process.test.test_pipeline\")\n",
    "xmlpipe.help()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And generate his graphical representation:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "if globals().get('use_gui', True):\n",
    "    from soma.qt_gui.qt_backend import QtGui\n",
    "    from capsul.qt_gui.widgets import PipelineDevelopperView\n",
    "    from soma.qt_gui.controller_widget import ControllerWidget\n",
    "\n",
    "    if \"app_created\" not in globals():\n",
    "        app_created = False\n",
    "    app = QtGui.QApplication.instance()\n",
    "    if app is None:\n",
    "        app = QtGui.QApplication(sys.argv)\n",
    "        app_created = True\n",
    "    view = PipelineDevelopperView(xmlpipe)\n",
    "    controller = ControllerWidget(xmlpipe, live=True)\n",
    "    view.show()\n",
    "    controller.show()\n",
    "    if app_created:\n",
    "        app.exec_()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>Use Nipype in Capsul</h2>\n",
    "\n",
    "It is possible to use all the nipype interfaces (FSL, SPM, FreeSurfer, ...) as building blocks in Capsul. This step requires nipype to be properly installed as well as the software we want to use. For instance if we want to perform a brain extraction with FSL we can simply write:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from capsul.api import get_process_instance\n",
    "\n",
    "try:\n",
    "    import nipype\n",
    "except ImportError:\n",
    "    print('nipype is not available')\n",
    "    nipype = None\n",
    "if nipype is not None:\n",
    "    betpipe = get_process_instance(\"nipype.interfaces.fsl.BET\")\n",
    "    betpipe.get_help()\n",
    "    betpipe.in_file=\"/tmp/capsul_demo/MNI152_T1_2mm.nii.gz\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As shown it is possible to set the BET algorithm input parameters. Note that in capsul the standard nipype outputs are prefixed with underscores. We can execute this Process but unfortunatelly, as mentioned by the nipype warnings, FSL has not been configured and the BET algorithm will not run. The following section shows a simplified way to configure external softwares in Capsul."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>A helper to configure state of the art medical softwares</h2>\n",
    "\n",
    "Capsul propose a module to configure external softwares:\n",
    "\n",
    "<ul style=\"list-style-type:disc;\">\n",
    "<li>FSL</li>\n",
    "<li>SPM</li>\n",
    "<li>FreeSurfer</li>\n",
    "<li>BrainVisa</li>\n",
    "</ul>\n",
    "\n",
    "With this module it is also possible to configure the execution of the pipeline:\n",
    "\n",
    "<ul style=\"list-style-type:disc;\">\n",
    "<li>Use smart caching</li>\n",
    "<li>Generate some logging</li>\n",
    "<li>Soma-Worflow to handle population imaging</li>\n",
    "</ul>\n",
    "\n",
    "Let show how to configure FSL:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from capsul.api import StudyConfig\n",
    "from pprint import pprint\n",
    "\n",
    "study_config = StudyConfig(\n",
    "    modules=[\"SmartCachingConfig\", \"FSLConfig\"],\n",
    "    fsl_config=\"/etc/fsl/4.1/fsl.sh\",\n",
    "    use_smart_caching=True,\n",
    "    output_directory=\"/tmp/capsul_demo\")\n",
    "pprint(dict(study_config.export_to_dict()))\n",
    "print(study_config.run.__doc__)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>Execution of the pipeline</h2>\n",
    "\n",
    "In this section a simple execution is performed on your machine using one CPU (if more than one CPU are used it means that the called external software is parallelized). We just have to call the StudyConfig run method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "if study_config.use_fsl and nipype is not None:\n",
    "    study_config.reset_process_counter()\n",
    "    study_config.run(betpipe, verbose=1)\n",
    "else:\n",
    "    print('FSL is not available or not correctly configured')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>Distributed execution top handle population imaging</h2>\n",
    "\n",
    "Capsul can execute a pipeline through Soma-Workflow in order to address huge datasets in the case of population imaging studies. But this functionality is out of the scope of this tuto."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
